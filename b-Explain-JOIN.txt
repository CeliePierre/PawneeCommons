Generating Explain




  

 
MySQL actually executes the query. But at each JOIN, instead of executing, it fills the EXPLAIN result set.


What is a JOIN?
Everything is a join , because MySQL always uses nested-loops. Even a single-table SELECT or a UNION or a subquery.


* The “id” column shows which SELECT the row belongs to : if only SELECT with no subquery or UNION, then 1 like our result.(Otherwise, generally numbered sequentially)
        
Simple/Complex :simple: there is only SELECT in the whole query but the 


  

Complex:(3 subtypes)
        subquery: numbered according to position in SQL text
        derived: executed as a temp table 
        union: fill a temp table, then read out with a NULL id in a row that says UNION RESULT


     
 


________________




* The “select_type” column shows Simple vs. Complex(which type of complex)
Special UNION rule: first contained SELECT matches outer context
Dependencies, un-cacheability : refers to the item_cache, not query cache






*  The “table” column shows the table name or its alias, derived tables are complicated, forward reference :<derivedN>. UNION is complicated too ,backward references : <Union 1,2,3,…>
  

* The “Type” column shows how MySQL will access rows. 
Worse to better:
                All, index, range, ref, eq_ref, const, system, NULL


FROM PawneeCommons.plays p


	  

	JOIN PawneeCommons.person pl ON p.pID = pl.pID
	JOIN PawneeCommons.works w ON p.pID = w.pID
HAVING COUNT(DISTINCT w.job) > 1;
	LEFT JOIN PawneeCommons.episode e ON w.eID = e.eID


	



* All:A full table scan is done for each combination of rows from the previous tables. This is normally not good if the table is the first table not marked const, and usually very bad in all other cases.
* index: The index join type is the same as ALL, except that the index tree is scanned. This occurs two ways:
If the index is a covering index for the queries and can be used to satisfy all data required from the table, only the index tree is scanned. 
In this case, the Extra column says Using index. An index-only scan usually is faster than ALL because the size of the index usually is smaller than the table data.
A full table scan is performed using reads from the index to look up data rows in index order. Uses index does not appear in the Extra column.


* range :    range can be used when a key column is compared to a constant using any of the =, <>, >, >=, <, <=, IS NULL, <=>, BETWEEN, LIKE, or IN() operators


* ref: ref can be used for indexed columns that are compared using the = or <=> operator.


* eq_ref: eq_ref can be used for indexed columns that are compared using the = operator. The comparison value can be a constant or an expression that uses columns from tables that are read before this table. 


* constants :   The table has at most one matching row, which is read at the start of the query. Because there is only one row, values from the column in this row can be regarded as constants by the rest of the optimizer. const tables are very fast because they are read only once. const is used when you compare all parts of a PRIMARY KEY or UNIQUE index to constant values.


* system: The table has only one row (= system table). This is a special case of the const join type.


NULL: no table involved.
________________




The “Possible_keys” columns show which indexes were candidates.
  

The “key” column shows which indexes the optimizer chose.
  

The “key_len” column shows that How many bytes of the index will be used.
  



The “Ref” column shows the source of values used for lookups.The ref column shows which columns or constants are compared to the index named in the key column to select rows from the table.
  

The “rows” column estimated #rows to examine in the table/index.
  

The”filtered” column shows the percentage of rows that satisfy WHERE, usually 0 or 100 ; complex behavior.
  



The “Extra” column of EXPLAIN output contains additional information about how MySQL resolves the query. The following list explains the values that can appear in this column. Each item also indicates for JSON-formatted output which property displays the Extra value. For some of these, there is a specific property. The others display as the text of the message property.
If you want to make your queries as fast as possible, look out for Extra column values of Using filesort and Using temporary, or, in JSON-formatted EXPLAIN output, for using_filesort and using_temporary_table properties equal to true.
  









  



 
               
________________